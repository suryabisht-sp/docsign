{"version":3,"sources":["OAuthImplicit.js","assets/anchorfields.pdf","DocuSign.js","App.js","reportWebVitals.js","index.js"],"names":["sdkString","log","m","console","oauthState","OAuthImplicit","generateId","arr","Uint8Array","arguments","length","undefined","window","crypto","getRandomValues","Array","from","dec","concat","toString","substr","join","constructor","app","this","oauthWindow","receiveHash","hash","config","accessTokenFound","substring","accessTokenUrl","scopeValue","match","newScopeValue","decodeURIComponent","replace","newAccessTokenUrl","encodeURIComponent","search","error","toast","autoClose","localStorage","getItem","results","exec","accessToken","expiresIn","clear","DS_REDIRECT_AUTHENTICATION","history","replaceState","DS_APP_URL","close","expires","Date","setTime","getTime","toastId","success","userInfo","fetchUserInfo","defaultAccountArray","accounts","filter","acc","is_default","defaultAccount","msg","baseUri","externalAccountId","getExternalAccountId","account_id","dismiss","oAuthResults","name","email","accountId","accountName","account_name","startLogin","oauthStateValue","redirectUrl","setItem","url","DS_IDP","IMPLICIT_SCOPES","DS_CLIENT_ID","location","open","logout","userInfoResponse","fetch","headers","Headers","Authorization","Accept","e","ok","statusText","json","response","method","urlFrag","DocuSign","sendEnvelope","bind","anchorfields_pdf","status","fileBlob","blob","reader","FileReader","Promise","resolve","onloadend","readAsDataURL","base64File","result","split","envelopeRequest","emailSubject","recipients","signers","state","formEmail","formName","recipientId","tabs","signHereTabs","anchorString","anchorXOffset","anchorUnits","documents","fileExtension","documentId","documentBase64","body","JSON","stringify","data","availableApiReqHeader","get","availableApiRequests","parseInt","apiResetHeader","apiRequestsReset","traceId","errorMsg","envelopeId","text","message","getEnvelope","responseEnvelopeId","resultsEnvelopeJson","App","React","Component","props","super","page","working","workingMessage","responseErrorMsg","responseAvailableApiRequests","responseApiRequestsReset","responseSuccess","responseTraceId","oAuthImplicit","docusign","startAuthentication","formNameChange","formEmailChange","receiveMessage","componentDidMount","setState","newhash","addEventListener","rawSource","source","checkToken","clearAuth","clearState","event","target","value","render","pagebody","nameBlock","Welcome","LoggedIn","_jsxs","Navbar","Text","children","_jsx","Nav","Link","href","onClick","spinner","Container","fluid","className","style","display","Row","_Fragment","fixed","bg","variant","Brand","Toggle","Collapse","ToastContainer","resetTime","resetTimeString","Intl","DateTimeFormat","dateStyle","timeStyle","format","Col","Form","Group","controlId","Label","Control","type","placeholder","onChange","Button","Jumbotron","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.23204a5d.chunk.js","sourcesContent":["/**\n * This file's functions are used for OAuthImplicit grant and\n * related authentication operations.\n */\nimport { toast } from 'react-toastify';\n\nconst oauthResponseHtml = 'oauthResponse.html'; // only used for new tab auth\nconst expirationBuffer = 10 * 60; // 10 minute buffer\nconst sdkString = 'codeEg_react';\nconst urlFrag = '/restapi/v2.1'; // DocuSign specific\nconst log = m => {console.log(m)}\nconst oauthState = 'oauthState'; // The name of the localStorage item for the OAuth state parameter\n\nclass OAuthImplicit {\n    //\n    // Static methods\n    //\n    /**\n     * Generate a psuedo random string\n     * See https://stackoverflow.com/a/27747377/64904\n     * @param {integer} len  length of the returned string\n     */\n    static generateId(len = 40) {\n        // dec2hex :: Integer -> String i.e. 0-255 -> '00'-'ff'\n        const arr = new Uint8Array((len || 40) / 2);\n        function dec2hex(dec) {\n        return `0${dec.toString(16)}`.substr(-2);\n        }\n        window.crypto.getRandomValues(arr);\n        return Array.from(arr, dec2hex).join('');\n    }\n\n    //\n    // constructor for the class\n    //\n    constructor(app) {\n        this.app = app;\n        this.oauthWindow = null; // only used for new tab auth\n    }\n\n    /**\n     * Handle incoming OAuth Implicit grant response\n     */\n    async receiveHash(hash) {\n        const config = window.config;\n        const accessTokenFound = hash && hash.substring(0, 14) === '#access_token=';\n        console.log(\"access token\", hash)\n        if (!accessTokenFound) {return} // EARLY RETURN\n        // Avoiding an injection attack: check that the hash only includes expected characters\n        // An example: #access_token=eyJ0eXA...[Access tokens can be 610 characters or longer]...wKVQLqF6A&expires_in=28800&token_type=bearer&state=e3f287fbe93...c58bd6a67fe2\n\n        // No characters other than #.-&=_ a-z A-Z 0-9 (no spaces)\n        const hashRegex = /[^#.\\-&=_a-zA-Z0-9]/;\n        var accessTokenUrl = hash\n// Extract the scope parameter value\nvar scopeValue = accessTokenUrl.match(/scope=([^&]+)/)[1];\n\n// Decode the URL-encoded string and replace space with hyphen\nvar newScopeValue = decodeURIComponent(scopeValue).replace(/%20/g, \"-\");\n\n// Replace the old scope value with the new one\nvar newAccessTokenUrl = accessTokenUrl.replace(/scope=([^&]+)/, \"scope=\" + encodeURIComponent(newScopeValue));\n\n        if (newAccessTokenUrl.search(hashRegex) !== -1) {\n            console.error (`Potential XSS attack via fragment (#) value: ${newAccessTokenUrl}`);\n            toast.error('Potential XSS attack via the fragment value. Please login again.', {\n                autoClose: 7000});\n            return\n        } \n\n        const oauthStateValue = window.localStorage.getItem(oauthState);\n        const regex = /(#access_token=)(.*)(&expires_in=)(.*)(&token_type=)(.*)(&state=)(.*)/\n            , results = regex.exec(newAccessTokenUrl)\n            , accessToken = results[2]\n            , expiresIn = results[4]\n       ;\n        // if (!stateOk) {\n        //     toast.error('State error during login. Please login again.', {\n        //         autoClose: 10000});\n        //     console.error(`OAuth state mismatch!! Expected state: ${oauthStateValue}; received state: ${incomingState}`);\n        //     return // EARLY RETURN\n        // }\n        window.localStorage.clear(); // clean up\n\n        if (config.DS_REDIRECT_AUTHENTICATION) {\n            // Using redirect the window authentication:\n            // hash was good, so erase it from the browser\n            window.history.replaceState(null, '', config.DS_APP_URL);\n        } else {\n            // Using new tab authentication:\n            // close the tab that was used for authentication\n            if (this.oauthWindow) {this.oauthWindow.close()}\n        }\n\n        // calculate expires\n        let expires = new Date()\n        expires.setTime(expires.getTime() + (expiresIn - expirationBuffer)* 1000)\n        this.accessToken = accessToken;\n\n        const toastId = toast.success('Completing the login process...', {autoClose: 7000});\n\n        // call /oauth/userinfo for general user info\n        // This API method is common for many IdP systems.\n        // But the exact format of the response tends to vary.\n        // The following works for the DocuSign IdP.\n        const userInfo = await this.fetchUserInfo();\n        // console.log(\"user info\", userInfo)\n        const defaultAccountArray = userInfo.accounts.filter((acc) => acc.is_default);\n        const defaultAccount = defaultAccountArray.length > 0 && defaultAccountArray[0];\n        if (!defaultAccount) {\n            const msg = `Problem: the user does not have a default account. Contact DocuSign Customer Service to fix.`;\n            log(msg);\n            toast.error(msg, { autoClose: 10000 });\n            return;\n        }\n        // \n        // Need to select the right proxy for the API call\n        // update the baseUri setting\n        let baseUri = 'https://demo.docusign.net'\n        // let baseUri = config.DS_API_CORS_PROXIES[defaultAccount.base_uri];\n        // if (!baseUri) {\n        //     const msg = `Problem: no proxy for ${defaultAccount.base_uri}.`;\n        //     log(msg);\n        //     toast.error(msg, { autoClose: 10000 });\n        //     return; \n        // }\n            \n        const externalAccountId = await this.getExternalAccountId(\n            defaultAccount.account_id, baseUri);\n        toast.dismiss(toastId);\n        this.app.oAuthResults({\n            accessToken,\n            expires,\n            name: userInfo.name,\n            email: userInfo.email,\n            accountId: defaultAccount.account_id,\n            externalAccountId,\n            accountName: defaultAccount.account_name,\n            baseUri: baseUri,\n        })\n    }\n\n    /**\n     * Start the login flow by computing the Implicit grant URL\n     * and either redirecting to the URL for the user or\n     * creating a new browser tab for the authentication flow\n     */\n    startLogin() {\n        const config = window.config;\n        const oauthStateValue = OAuthImplicit.generateId();\n        window.localStorage.setItem(oauthState, oauthStateValue); // store for when we come back\n        let redirectUrl;\n        if (config.DS_REDIRECT_AUTHENTICATION) {\n            // Using redirect the window authentication:\n            redirectUrl = config.DS_APP_URL;\n        } else {\n            // Using new tab authentication\n            redirectUrl = `${config.DS_APP_URL}`;\n        }    \n\n// for implicit grant\n        const url =\n            `${window.config.DS_IDP}/oauth/auth?` +\n            `response_type=token&` +\n            `scope=${window.config.IMPLICIT_SCOPES}&` +\n            `client_id=${window.config.DS_CLIENT_ID}&` +\n            `state=${oauthStateValue}&`+\n            `redirect_uri=${encodeURIComponent(redirectUrl)}`;\n\n        //for authorisation grant\n        // const url =\n        //     `${window.config.DS_IDP}/oauth/auth?` +\n        //     `response_type=code&` +\n        //     `scope=${window.config.IMPLICIT_SCOPES}&` +\n        //     `client_id=${window.config.DS_CLIENT_ID}&` +\n        //     `state=${oauthStateValue}&` +\n        //     `redirect_uri=${encodeURIComponent(redirectUrl)}`;\n\n        if (config.DS_REDIRECT_AUTHENTICATION) {\n            // Using redirect the window authentication:\n            window.location = url;\n        } else {\n            // Using new tab authentication:\n            // Create a new tab for authentication\n            this.oauthWindow = window.open(url, \"_blank\");\n        }    \n    }\n\n    /**\n     * logout of the DocuSign IdP. \n     * If SSO is used, the upstream IdP may not redirect the \n     * browser back to this app\n     */\n    logout () {\n        const config = window.config;\n        const url =\n            `${window.config.DS_IDP}/logout?` +\n            `response_type=token&` +\n            `scope=${config.IMPLICIT_SCOPES}&` +\n            `client_id=${config.DS_CLIENT_ID}&` +\n            `redirect_uri=${encodeURIComponent(config.DS_APP_URL)}&` +\n            `response_mode=logout_redirect`;\n        window.location = url;\n    }\n    /**\n     * A relatively common OAuth API endpoint for obtaining information\n     * on the user associated with the accessToken\n     * @returns userInfoResponse JSON \n     */\n    async fetchUserInfo() {\n        let userInfoResponse\n        try {\n            userInfoResponse = await fetch(\n                `${window.config.DS_IDP}/oauth/userinfo`, {\n                headers: new Headers({\n                    Authorization: `Bearer ${this.accessToken}`,\n                    Accept: `application/json`,\n                    'X-DocuSign-SDK': sdkString,\n                }),\n            })\n        } catch (e) {\n            const msg = `Problem while completing login.\\nPlease retry.\\nError: ${e.toString()}`;\n            log(msg);\n            toast.error(msg, { autoClose: 10000 });\n            return null;\n        }\n        if (!userInfoResponse || !userInfoResponse.ok) {\n            const msg = `Problem while completing login.\\nPlease retry.\\nError: ${userInfoResponse.statusText}`;\n            log(msg);\n            toast.error(msg, { autoClose: 10000 });\n            return null;\n        }\n        return await userInfoResponse.json();\n    }\n\n    /**\n     * Fetch the user-friendly version of the accountId.\n     * See https://developers.docusign.com/docs/esign-rest-api/reference/accounts/accounts/get/\n     */\n    async getExternalAccountId(accountId, baseUri) {\n        try {\n            const url = `${baseUri}${urlFrag}/accounts/${accountId}`;\n            const response = await fetch(url, {\n                method: 'GET',\n                 headers: new Headers({\n                    Authorization: `Bearer ${this.accessToken}`,\n                    Accept: `application/json`,\n                    'X-DocuSign-SDK': sdkString,\n                })\n            });\n            const data = response && response.ok && (await response.json());\n            return data.externalAccountId;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n\nexport default OAuthImplicit;","export default __webpack_public_path__ + \"static/media/anchorfields.228f85c9.pdf\";","/**\n * DocuSign and related operations.\n */\nimport { toast } from 'react-toastify';\nimport anchorfields_pdf from './assets/anchorfields.pdf'; \n\nconst docName = 'anchorfields.pdf';\nconst sdkString = 'codeEg_react';\nconst urlFrag = '/restapi/v2.1'; // DocuSign specific\n\n/**\n * Asset files\n * Add assets (eg PDF files) to the top level public directory.\n * (NOT under /src.) They will be included with the packaged app.\n *\n */\n\nclass DocuSign {\n    //\n    // constructor for the class\n    //\n    constructor(app) {\n        this.app = app;\n        this.sendEnvelope = this.sendEnvelope.bind(this);\n    }\n\n    //\n    // Instance methods\n    //\n\n    /**\n     * Send an envelope, return results or error\n     */\n    async sendEnvelope() {\n        // get the document\n        let response = await fetch(anchorfields_pdf)\n        if (!response || response.status !== 200) {\n            const msg = `Could not fetch file ${anchorfields_pdf}`;\n            console.log(msg);\n            toast.error(msg, { autoClose: 10000 });\n            return;\n        }\n        // See https://stackoverflow.com/a/39951543/64904\n        const fileBlob = await response.blob();\n        const reader = new FileReader();\n        await new Promise(resolve => {\n            reader.onloadend = resolve;\n            reader.readAsDataURL(fileBlob); \n        });\n        const base64File = reader.result.split(',')[1];\n        \n        const envelopeRequest = {\n            emailSubject: 'Please sign the attached document',\n            status: 'sent',\n            recipients: {\n                signers: [\n                {\n                    email: this.app.state.formEmail,\n                    name: this.app.state.formName,\n                    recipientId: '1',\n                    tabs: {\n                        signHereTabs: [\n                            {\n                            anchorString: '/sn1/',\n                            anchorXOffset: '20',\n                            anchorUnits: 'pixels',\n                            },\n                        ],\n                    },\n                },\n                ],\n            },\n            documents: [\n                {\n                    name: docName,\n                    fileExtension: 'pdf',\n                    documentId: '1',\n                    documentBase64: base64File,\n                },\n            ],\n        };\n\n        try {\n        const url =\n            `${this.app.state.baseUri}${urlFrag}` +\n            `/accounts/${this.app.state.accountId}` +\n            `/envelopes`;\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(envelopeRequest),\n            headers: new Headers({\n            Authorization: `Bearer ${this.app.state.accessToken}`,\n            Accept: `application/json`,\n            'Content-Type': 'application/json',\n            'X-DocuSign-SDK': sdkString,\n            }),\n        });\n        const data = response && response.ok && (await response.json());\n        let result;\n        const headers = response.headers;\n        const availableApiReqHeader = headers.get('X-RateLimit-Remaining');\n        const availableApiRequests = availableApiReqHeader\n            ? parseInt(availableApiReqHeader, 10)\n            : undefined;\n        const apiResetHeader = headers.get('X-RateLimit-Reset');\n        const apiRequestsReset = apiResetHeader\n            ? new Date(parseInt(apiResetHeader, 10) * 1000)\n            : undefined;\n        const traceId = headers.get('X-DocuSign-TraceToken') || undefined;\n        if (response.ok) {\n            result = {\n            success: true,\n            errorMsg: undefined,\n            envelopeId: data.envelopeId,\n            availableApiRequests,\n            apiRequestsReset,\n            traceId,\n            };\n        } else {\n            result = {\n            success: false,\n            errorMsg: response && (await response.text()),\n            envelopeId: undefined,\n            availableApiRequests,\n            apiRequestsReset,\n            traceId,\n            };\n        }\n        return result;\n        } catch (e) {\n        // Unfortunately we don't have access to the real\n        // networking problem!\n        // See https://medium.com/to-err-is-aaron/detect-network-failures-when-using-fetch-40a53d56e36\n        const errorMsg =\n            e.message === 'Failed to fetch'\n            ? 'Networking error—check your Internet and DNS connections'\n            : e.message;\n        return {\n            success: false,\n            errorMsg,\n            envelopeId: undefined,\n            availableApiRequests: undefined,\n            apiRequestsReset: undefined,\n            traceId: undefined,\n        };\n        }\n    }\n\n    /**\n     * Get envelope's status, return results or error\n     */\n     async getEnvelope() {\n        try {\n        const url =\n            `${this.app.state.baseUri}${urlFrag}` +\n            `/accounts/${this.app.state.accountId}` +\n            `/envelopes/${this.app.state.responseEnvelopeId}`;\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: new Headers({\n            Authorization: `Bearer ${this.app.state.accessToken}`,\n            Accept: `application/json`,\n            'Content-Type': 'application/json',\n            'X-DocuSign-SDK': sdkString,\n            }),\n        });\n        const data = response && response.ok && (await response.json());\n        let result;\n        const headers = response.headers;\n        const availableApiReqHeader = headers.get('X-RateLimit-Remaining');\n        const availableApiRequests = availableApiReqHeader\n            ? parseInt(availableApiReqHeader, 10)\n            : undefined;\n        const apiResetHeader = headers.get('X-RateLimit-Reset');\n        const apiRequestsReset = apiResetHeader\n            ? new Date(parseInt(apiResetHeader, 10) * 1000)\n            : undefined;\n        const traceId = headers.get('X-DocuSign-TraceToken') || undefined;\n        if (response.ok) {\n            result = {\n            success: true,\n            errorMsg: undefined,\n            resultsEnvelopeJson: data,\n            availableApiRequests,\n            apiRequestsReset,\n            traceId,\n            };\n        } else {\n            result = {\n            success: false,\n            errorMsg: response && (await response.text()),\n            resultsEnvelopeJson: undefined,\n            availableApiRequests,\n            apiRequestsReset,\n            traceId,\n            };\n        }\n        return result;\n        } catch (e) {\n        // Unfortunately we don't have access to the real\n        // networking problem!\n        // See https://medium.com/to-err-is-aaron/detect-network-failures-when-using-fetch-40a53d56e36\n        const errorMsg =\n            e.message === 'Failed to fetch'\n            ? 'Networking error—check your Internet and DNS connections'\n            : e.message;\n        return {\n            success: false,\n            errorMsg,\n            resultsEnvelopeJson: undefined,\n            availableApiRequests: undefined,\n            apiRequestsReset: undefined,\n            traceId: undefined,\n        };\n        }\n    }\n\n}\n\nexport default DocuSign;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { ToastContainer, toast } from 'react-toastify';\nimport OAuthImplicit from './OAuthImplicit';\nimport DocuSign from './DocuSign';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            accessToken: undefined,\n            expires: undefined,\n            name: undefined,\n            email: undefined,\n            externalAccountId: undefined,\n            accountName: undefined,\n            accountId: undefined,\n            baseUri: undefined,\n            page: 'welcome', // initial page. Pages: welcome|loggedIn\n            working: false,\n            workingMessage: '',\n            responseErrorMsg: undefined,\n            responseEnvelopeId: undefined,\n            responseAvailableApiRequests: undefined,\n            responseApiRequestsReset: undefined,\n            responseSuccess: undefined,\n            responseTraceId: undefined,\n            resultsEnvelopeJson: undefined,\n            formName: '',\n            formEmail: '',\n        };\n        this.oAuthImplicit = new OAuthImplicit(this);\n        this.docusign = new DocuSign(this);\n\n\n        // bind <this> for methods called by React via buttons, etc\n        this.logout = this.logout.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.formNameChange = this.formNameChange.bind(this);\n        this.formEmailChange = this.formEmailChange.bind(this);\n        this.sendEnvelope = this.sendEnvelope.bind(this);\n        this.getEnvelope = this.getEnvelope.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n    }\n\n    /**\n     * Starting up--if our URL includes a hash, check it to see if \n     * it's the OAuth response\n     */\n    async componentDidMount() {\n        const config = window.config;\n        // if the url has a query parameter of ?error=logout_request (from a logout operation) \n        // then remove it\n        if (window.location.search && window.location.search === '?error=logout_request') {\n            window.history.replaceState(null, '', config.DS_APP_URL);\n        }\n\n        if (config?.DS_REDIRECT_AUTHENTICATION) {\n            const hash = window.location.hash;\n            if (!hash) { return }\n            // possible OAuth response\n            this.setState({ working: true, workingMessage: 'Logging in' });\n            var scopeValue = hash.match(/scope=([^&]+)/)[1];\n\n            // Decode the URL-encoded string and replace space with hyphen\n            var newScopeValue = decodeURIComponent(scopeValue).replace(/%20/g, \"-\");\n\n            // Replace the old scope value with the new one\n            var newhash = hash.replace(/scope=([^&]+)/, \"scope=\" + encodeURIComponent(newScopeValue));\n            await this.oAuthImplicit.receiveHash(newhash);\n            this.setState({ working: false });\n        } else {\n            // await authentication via the new tab\n            window.addEventListener(\"message\", this.receiveMessage, false);\n        }\n    }\n\n    /**\n     * Receive message from a child .\n     * This method is only used if authentication is done\n     * in a new tab. See file public/oauthResponse.html \n     * @param {object} e \n     */\n    async receiveMessage(e) {\n        console.log(\"e data\", e)\n        const rawSource = e && e.data && e.data.source\n            , ignore = {\n                'react-devtools-inject-backend': true,\n                'react-devtools-content-script': true,\n                'react-devtools-detector': true,\n                'react-devtools-bridge': true\n            }\n            , source = (rawSource && !ignore[rawSource]) ? rawSource : false\n            ;\n        if (!source) { return }; // Ignore if no source field\n        if (source === 'oauthResponse') {\n            this.setState({ working: true, workingMessage: 'Logging in' });\n            const hash = e.data && e.data.hash;\n            await this.oAuthImplicit.receiveHash(hash);\n            this.setState({ working: false });\n        }\n    }\n\n    startAuthentication() {\n        this.oAuthImplicit.startLogin();\n    }\n\n    /**\n     * Is the accessToken ok to use?\n     * @returns boolean accessTokenIsGood\n     */\n    checkToken() {\n        if (\n            !this.state.accessToken ||\n            this.state.expires === undefined ||\n            new Date() > this.state.expires\n        ) {\n            // Need new login. Only clear auth, don't clear the state (leave form contents);\n            this.clearAuth();\n            this.setState({ page: 'welcome', working: false });\n            toast.error('Your login session has ended.\\nPlease login again', {\n                autoClose: 8000,\n            });\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * This method clears this app's authentication information.\n     * But there may still be an active login session cookie\n     * from the IdP. Your IdP may have an API method for clearing\n     * the login session.\n     */\n    logout() {\n        this.clearAuth();\n        this.clearState();\n        this.setState({ page: 'welcome' });\n        toast.success('You have logged out.', { autoClose: 5000 });\n        this.oAuthImplicit.logout();\n    }\n\n    /**\n     * Clear authentication-related state\n     */\n    clearAuth() {\n        this.setState({\n            accessToken: undefined,\n            expires: undefined,\n            accountId: undefined,\n            externalAccountId: undefined,\n            accountName: undefined,\n            baseUri: undefined,\n            name: undefined,\n            email: undefined,\n        })\n    }\n\n    /**\n     * Clear the app's form and related state\n     */\n    clearState() {\n        this.setState({\n            formName: '',\n            formEmail: '',\n            working: false,\n            responseErrorMsg: undefined,\n            responseEnvelopeId: undefined,\n            responseAvailableApiRequests: undefined,\n            responseApiRequestsReset: undefined,\n            responseSuccess: undefined,\n            responseTraceId: undefined,\n            resultsEnvelopeJson: undefined,\n        });\n    }\n\n    /**\n     * Process the oauth results.\n     * This method is called by the OAuthImplicit class\n     * @param results\n     */\n    oAuthResults(results) {\n        console.log(\"resultsssssss\", results)\n        this.setState({\n            accessToken: results.accessToken,\n            expires: results.expires,\n            name: results.name,\n            externalAccountId: results.externalAccountId,\n            email: results.email,\n            accountId: results.accountId,\n            accountName: results.accountName,\n            baseUri: results.baseUri,\n            page: 'loggedIn',\n            formName: results.name, // default: set to logged in user\n            formEmail: results.email,\n        });\n\n        toast.success(`Welcome ${results.name}, you are now logged in`);\n    }\n\n    formNameChange(event) {\n        this.setState({ formName: event.target.value });\n    }\n\n    formEmailChange(event) {\n        this.setState({ formEmail: event.target.value });\n    }\n\n    async sendEnvelope() {\n        this.setState({\n            responseErrorMsg: undefined,\n            responseEnvelopeId: undefined,\n            responseAvailableApiRequests: undefined,\n            responseApiRequestsReset: undefined,\n            responseSuccess: undefined,\n            responseTraceId: undefined,\n            resultsEnvelopeJson: undefined,\n        });\n        if (!this.checkToken()) {\n            return; // Problem! The user needs to login\n        }\n        if (!this.state.formEmail || this.state.formEmail.length < 5) {\n            toast.error(\"Problem: Enter the signer's email address\");\n            return;\n        }\n        if (!this.state.formName || this.state.formName.length < 5) {\n            toast.error(\"Problem: Enter the signer's name\");\n            return;\n        }\n\n        this.setState({ working: true, workingMessage: \"Sending envelope\" });\n        const results = await this.docusign.sendEnvelope();\n        const { apiRequestsReset } = results;\n        const responseApiRequestsReset = apiRequestsReset ?\n            new Date(apiRequestsReset) : undefined;\n        this.setState({\n            working: false,\n            responseSuccess: results.success,\n            responseErrorMsg: results.errorMsg,\n            responseEnvelopeId: results.envelopeId,\n            responseAvailableApiRequests: results.availableApiRequests,\n            responseTraceId: results.traceId,\n            responseApiRequestsReset,\n        });\n    }\n\n    async getEnvelope() {\n        this.setState({\n            responseErrorMsg: undefined,\n            responseEnvelopeId: undefined,\n            responseAvailableApiRequests: undefined,\n            responseApiRequestsReset: undefined,\n            responseSuccess: undefined,\n            responseTraceId: undefined,\n        });\n        if (!this.checkToken()) {\n            return; // Problem! The user needs to login\n        }\n        if (!this.state.responseEnvelopeId) {\n            toast.error(\"Problem: First send an envelope\");\n            return;\n        }\n\n        this.setState({ working: true, workingMessage: \"Fetching the envelope's status\" });\n        const results = await this.docusign.getEnvelope();\n        const { apiRequestsReset } = results;\n        const responseApiRequestsReset = apiRequestsReset\n            ? new Date(apiRequestsReset) : undefined;\n        this.setState({\n            working: false,\n            responseSuccess: results.success,\n            responseErrorMsg: results.errorMsg,\n            responseAvailableApiRequests: results.availableApiRequests,\n            responseTraceId: results.traceId,\n            resultsEnvelopeJson: results.resultsEnvelopeJson,\n            responseApiRequestsReset,\n        });\n    }\n\n    /**\n     * Render this component\n     */\n    render() {\n        // Just two pages with a common header. \n        // Choose the body of the page:\n        let pagebody;\n        switch (this.state.page) {\n            case 'welcome': // not logged in\n                pagebody = this.Welcome();\n                break;\n            case 'loggedIn':\n                pagebody = this.LoggedIn();\n                break;\n            default:\n                pagebody = this.Welcome();\n        };\n\n        // Compute the name block for the top nav section\n        let nameBlock;\n        if (this.state.accessToken) {\n            nameBlock = (\n                <Navbar.Text>\n                    {this.state.name}<br />\n                    {this.state.accountName} ({this.state.accountId})\n                    <Nav>\n                        <Nav.Link href=\"#\" onClick={() => this.logout()}>Logout</Nav.Link>\n                    </Nav>\n                </Navbar.Text>\n            )\n        } else {\n            nameBlock = null;\n        }\n\n        // The spinner\n        const spinner = (\n            <Container fluid className='bodyMargin'\n                style={{ display: this.state.working ? 'block' : 'none' }}>\n                <Row className='justify-content-center'>\n                    <div className=\"spinner\" />\n                </Row>\n                <Row className='justify-content-center'>\n                    <h3>{this.state.workingMessage}…</h3>\n                </Row>\n            </Container>\n        )\n\n        // The complete page:\n        return (\n            <>\n                <Navbar fixed=\"top\" bg=\"primary\" variant=\"dark\" >\n                    <Navbar.Brand>DocuSign Code Example</Navbar.Brand>\n                    <Navbar.Toggle />\n                    <Navbar.Collapse className=\"justify-content-end\">{nameBlock}</Navbar.Collapse>\n                </Navbar>\n                <ToastContainer />\n                {spinner}\n                {pagebody}\n            </>\n        )\n    }\n\n    LoggedIn() {\n        const resetTime = this.state.responseApiRequestsReset;\n        const resetTimeString = resetTime\n            ? new Intl.DateTimeFormat('en-US', {\n                dateStyle: 'medium',\n                timeStyle: 'full',\n            }).format(resetTime)\n            : undefined;\n        return (\n            <Container className='bodyMargin'>\n                <Row>\n                    <Col className=\"col-md-4\">\n                        <h2>Send an Envelope</h2>\n                        <Form>\n                            <Form.Group controlId=\"formName\">\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Name\"\n                                    value={this.state.formName}\n                                    onChange={this.formNameChange}\n\n                                />\n                            </Form.Group>\n                            <Form.Group controlId=\"formEmail\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"Email\"\n                                    value={this.state.formEmail}\n                                    onChange={this.formEmailChange}\n                                />\n                            </Form.Group>\n\n                            <Button variant=\"primary\" onClick={this.sendEnvelope}>\n                                Send Envelope\n                            </Button>\n                            <Button variant=\"primary\" className='ml-4' onClick={this.getEnvelope}>\n                                Get Envelope Status\n                            </Button>\n                        </Form>\n                    </Col>\n                </Row>\n                <Row className='mt-4'>\n                    <Col>\n                        <h2>Results</h2>\n                        <h2>\n                            {this.state.responseSuccess !== undefined ? (\n                                this.state.responseSuccess ? (\n                                    <>✅ Success!</>\n                                ) : (\n                                    <>❌ Problem!</>\n                                )\n                            ) : null}\n                        </h2>\n                        {this.state.responseErrorMsg ? (\n                            <p>Error message: {this.state.responseErrorMsg}</p>\n                        ) : null}\n                        {this.state.responseEnvelopeId ? (\n                            <p>Envelope ID: {this.state.responseEnvelopeId}</p>\n                        ) : null}\n                        {this.state.resultsEnvelopeJson ? (\n                            <p><pre>Response: {JSON.stringify(this.state.resultsEnvelopeJson, null, 4)}</pre></p>\n                        ) : null}\n                        {this.state.responseAvailableApiRequests ? (\n                            <p>\n                                Available API requests: {this.state.responseAvailableApiRequests}\n                            </p>\n                        ) : null}\n                        {resetTimeString ? (\n                            <p>API requests reset time: {resetTimeString}</p>\n                        ) : null}\n                        {this.state.responseTraceId ? (\n                            <p>\n                                Trace ID: {this.state.responseTraceId}. Please include with all\n                                customer service questions.\n                            </p>\n                        ) : null}\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n\n    Welcome() {\n        return (\n            <Container fluid className='welcomeMargin'>\n                <Row>\n                    <Col>\n                        <Jumbotron>\n                            <h1>React Example with OAuth Authentication</h1>\n                            <p>\n                                OAuth Implicit grant flow.\n\n                            </p>\n                            <p>\n                                A better Way to Do signature.\n                            </p>\n                            <p>\n                                Login with your DocuSign Developer (Demo) credentials.\n                            </p>\n                            <p>\n                                <Button variant=\"primary\" onClick={this.startAuthentication}>Login</Button>\n                            </p>\n                        </Jumbotron>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}