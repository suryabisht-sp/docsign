{"version":3,"sources":["OAuthImplicit.js","assets/anchorfields.pdf","DocuSign.js","App.js","reportWebVitals.js","index.js"],"names":["sdkString","log","m","console","oauthState","OAuthImplicit","generateId","arr","Uint8Array","arguments","length","undefined","window","crypto","getRandomValues","Array","from","dec","concat","toString","substr","join","constructor","app","this","oauthWindow","receiveHash","hash","config","substring","accessTokenUrl","scopeValue","match","newScopeValue","decodeURIComponent","replace","newAccessTokenUrl","encodeURIComponent","search","error","toast","autoClose","localStorage","getItem","results","exec","accessToken","expiresIn","clear","DS_REDIRECT_AUTHENTICATION","close","expires","Date","setTime","getTime","toastId","success","userInfo","fetchUserInfo","defaultAccountArray","accounts","filter","acc","is_default","defaultAccount","msg","baseUri","externalAccountId","getExternalAccountId","account_id","dismiss","oAuthResults","name","email","accountId","accountName","account_name","startLogin","oauthStateValue","redirectUrl","setItem","DS_APP_URL","url","DS_IDP","IMPLICIT_SCOPES","DS_CLIENT_ID","location","open","logout","userInfoResponse","fetch","headers","Headers","Authorization","Accept","e","ok","statusText","json","response","method","urlFrag","DocuSign","sendEnvelope","bind","chk","reader","FileReader","Promise","resolve","onloadend","readAsDataURL","base64File","result","split","envelopeRequest","emailSubject","status","recipients","signers","state","formEmail","formName","recipientId","tabs","signHereTabs","anchorString","anchorXOffset","anchorUnits","documents","fileExtension","documentId","documentBase64","body","JSON","stringify","data","availableApiReqHeader","get","availableApiRequests","parseInt","apiResetHeader","apiRequestsReset","traceId","errorMsg","envelopeId","text","message","getEnvelope","responseEnvelopeId","resultsEnvelopeJson","App","React","Component","props","super","handleFileChange","event","selectedFiles","target","files","validFiles","file","type","setState","errorMessage","forEach","convertToBlob","selectedPdfIndex","clearState","index","prevState","pdfBlobs","_","i","pdfBlob","Blob","namedBlob","blob","readAsArrayBuffer","showPreviewModal","showModal","selectedPdfPreviewIndex","hidePreviewModal","page","working","workingMessage","responseErrorMsg","responseAvailableApiRequests","responseApiRequestsReset","responseSuccess","responseTraceId","selectedFile","namedBlobs","oAuthImplicit","docusign","startAuthentication","formNameChange","formEmailChange","receiveMessage","componentDidMount","history","replaceState","newhash","addEventListener","rawSource","source","checkToken","clearAuth","value","render","pagebody","nameBlock","Welcome","LoggedIn","_jsxs","Navbar","Text","children","_jsx","Nav","Link","href","onClick","spinner","Container","fluid","className","style","display","Row","_Fragment","fixed","bg","variant","Brand","Toggle","Collapse","ToastContainer","_this$state$pdfBlobs","_this$state$pdfBlobs2","_this$state$pdfBlobs6","resetTime","resetTimeString","Intl","DateTimeFormat","dateStyle","timeStyle","format","Col","Form","Group","controlId","Label","Control","placeholder","onChange","htmlFor","id","accept","multiple","Button","map","_this$state$pdfBlobs3","_this$state$pdfBlobs4","_this$state$pdfBlobs5","width","title","height","src","Modal","show","onHide","Header","closeButton","Title","Body","URL","createObjectURL","Footer","class","scope","checked","padding","Jumbotron","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.2b88fcd2.chunk.js","sourcesContent":["/**\n * This file's functions are used for OAuthImplicit grant and\n * related authentication operations.\n */\nimport { toast } from 'react-toastify';\n\nconst oauthResponseHtml = 'oauthResponse.html'; // only used for new tab auth\nconst expirationBuffer = 10 * 60; // 10 minute buffer\nconst sdkString = 'codeEg_react';\nconst urlFrag = '/restapi/v2.1'; // DocuSign specific\nconst log = m => {console.log(m)}\nconst oauthState = 'oauthState'; // The name of the localStorage item for the OAuth state parameter\n\nclass OAuthImplicit {\n    //\n    // Static methods\n    //\n    /**\n     * Generate a psuedo random string\n     * See https://stackoverflow.com/a/27747377/64904\n     * @param {integer} len  length of the returned string\n     */\n    static generateId(len = 40) {\n        // dec2hex :: Integer -> String i.e. 0-255 -> '00'-'ff'\n        const arr = new Uint8Array((len || 40) / 2);\n        function dec2hex(dec) {\n        return `0${dec.toString(16)}`.substr(-2);\n        }\n        window.crypto.getRandomValues(arr);\n        return Array.from(arr, dec2hex).join('');\n    }\n\n    //\n    // constructor for the class\n    //\n    constructor(app) {\n        this.app = app;\n        this.oauthWindow = null; // only used for new tab auth\n    }\n\n    /**\n     * Handle incoming OAuth Implicit grant response\n     */\n    async receiveHash(hash) {\n        const config = window.config;\n        const accessTokenFound = hash && hash.substring(0, 14) === '#access_token=';\n        if (!accessTokenFound) {return} // EARLY RETURN\n          const hashRegex = /[^#.\\-&=_a-zA-Z0-9]/;\n        var accessTokenUrl = hash\n// Extract the scope parameter value\nvar scopeValue = accessTokenUrl.match(/scope=([^&]+)/)[1];\n\n// Decode the URL-encoded string and replace space with hyphen\nvar newScopeValue = decodeURIComponent(scopeValue).replace(/%20/g, \"-\");\n\n// Replace the old scope value with the new one\nvar newAccessTokenUrl = accessTokenUrl.replace(/scope=([^&]+)/, \"scope=\" + encodeURIComponent(newScopeValue));\n\n        if (newAccessTokenUrl.search(hashRegex) !== -1) {\n            console.error (`Potential XSS attack via fragment (#) value: ${newAccessTokenUrl}`);\n            toast.error('Potential XSS attack via the fragment value. Please login again.', {\n                autoClose: 7000});\n            return\n        } \n\n        const oauthStateValue = window.localStorage.getItem(oauthState);\n        const regex = /(#access_token=)(.*)(&expires_in=)(.*)(&token_type=)(.*)(&state=)(.*)/\n            , results = regex.exec(newAccessTokenUrl)\n            , accessToken = results[2]\n            , expiresIn = results[4]\n       ;\n        // if (!stateOk) {\n        //     toast.error('State error during login. Please login again.', {\n        //         autoClose: 10000});\n        //     console.error(`OAuth state mismatch!! Expected state: ${oauthStateValue}; received state: ${incomingState}`);\n        //     return // EARLY RETURN\n        // }\n        window.localStorage.clear(); // clean up\n\n        if (config.DS_REDIRECT_AUTHENTICATION) {\n            // Using redirect the window authentication:\n            // hash was good, so erase it from the browser\n            // window.history.replaceState(null, '', config.DS_APP_URL);\n        } else {\n            // Using new tab authentication:\n            // close the tab that was used for authentication\n            if (this.oauthWindow) {this.oauthWindow.close()}\n        }\n\n        // calculate expires\n        let expires = new Date()\n        expires.setTime(expires.getTime() + (expiresIn - expirationBuffer)* 1000)\n        this.accessToken = accessToken;\n\n        const toastId = toast.success('Completing the login process...', {autoClose: 7000});\n\n        // call /oauth/userinfo for general user info\n        // This API method is common for many IdP systems.\n        // But the exact format of the response tends to vary.\n        // The following works for the DocuSign IdP.\n        const userInfo = await this.fetchUserInfo();\n        // console.log(\"user info\", userInfo)\n        const defaultAccountArray = userInfo.accounts.filter((acc) => acc.is_default);\n        const defaultAccount = defaultAccountArray.length > 0 && defaultAccountArray[0];\n        if (!defaultAccount) {\n            const msg = `Problem: the user does not have a default account. Contact DocuSign Customer Service to fix.`;\n            log(msg);\n            toast.error(msg, { autoClose: 10000 });\n            return;\n        }\n        // \n        // Need to select the right proxy for the API call\n        // update the baseUri setting\n        let baseUri = 'https://demo.docusign.net'\n        // let baseUri = config.DS_API_CORS_PROXIES[defaultAccount.base_uri];\n        // if (!baseUri) {\n        //     const msg = `Problem: no proxy for ${defaultAccount.base_uri}.`;\n        //     log(msg);\n        //     toast.error(msg, { autoClose: 10000 });\n        //     return; \n        // }\n            \n        const externalAccountId = await this.getExternalAccountId(\n            defaultAccount.account_id, baseUri);\n        toast.dismiss(toastId);\n        this.app.oAuthResults({\n            accessToken,\n            expires,\n            name: userInfo.name,\n            email: userInfo.email,\n            accountId: defaultAccount.account_id,\n            externalAccountId,\n            accountName: defaultAccount.account_name,\n            baseUri: baseUri,\n        })\n    }\n\n    /**\n     * Start the login flow by computing the Implicit grant URL\n     * and either redirecting to the URL for the user or\n     * creating a new browser tab for the authentication flow\n     */\n    startLogin() {\n        const config = window.config;\n        const oauthStateValue = OAuthImplicit.generateId();\n        window.localStorage.setItem(oauthState, oauthStateValue); // store for when we come back\n        let redirectUrl;\n        if (config.DS_REDIRECT_AUTHENTICATION) {\n            // Using redirect the window authentication:\n            redirectUrl = config.DS_APP_URL;\n        } else {\n            // Using new tab authentication\n            redirectUrl = `${config.DS_APP_URL}`;\n        }    \n\n// for implicit grant\n        const url =\n            `${window.config.DS_IDP}/oauth/auth?` +\n            `response_type=token&` +\n            `scope=${window.config.IMPLICIT_SCOPES}&` +\n            `client_id=${window.config.DS_CLIENT_ID}&` +\n            `state=${oauthStateValue}&`+\n            `redirect_uri=${encodeURIComponent(redirectUrl)}`;\n\n        //for authorisation grant\n        // const url =\n        //     `${window.config.DS_IDP}/oauth/auth?` +\n        //     `response_type=code&` +\n        //     `scope=${window.config.IMPLICIT_SCOPES}&` +\n        //     `client_id=${window.config.DS_CLIENT_ID}&` +\n        //     `state=${oauthStateValue}&` +\n        //     `redirect_uri=${encodeURIComponent(redirectUrl)}`;\n\n        if (config.DS_REDIRECT_AUTHENTICATION) {\n            // Using redirect the window authentication:\n            window.location = url;\n        } else {\n            // Using new tab authentication:\n            // Create a new tab for authentication\n            this.oauthWindow = window.open(url, \"_blank\");\n        }    \n    }\n\n    /**\n     * logout of the DocuSign IdP. \n     * If SSO is used, the upstream IdP may not redirect the \n     * browser back to this app\n     */\n    logout () {\n        const config = window.config;\n        const url =\n            `${window.config.DS_IDP}/logout?` +\n            `response_type=token&` +\n            `scope=${config.IMPLICIT_SCOPES}&` +\n            `client_id=${config.DS_CLIENT_ID}&` +\n            `redirect_uri=${encodeURIComponent(config.DS_APP_URL)}&` +\n            `response_mode=logout_redirect`;\n        window.location = url;\n    }\n    /**\n     * A relatively common OAuth API endpoint for obtaining information\n     * on the user associated with the accessToken\n     * @returns userInfoResponse JSON \n     */\n    async fetchUserInfo() {\n        let userInfoResponse\n        try {\n            userInfoResponse = await fetch(\n                `${window.config.DS_IDP}/oauth/userinfo`, {\n                headers: new Headers({\n                    Authorization: `Bearer ${this.accessToken}`,\n                    Accept: `application/json`,\n                    'X-DocuSign-SDK': sdkString,\n                }),\n            })\n        } catch (e) {\n            const msg = `Problem while completing login.\\nPlease retry.\\nError: ${e.toString()}`;\n            log(msg);\n            toast.error(msg, { autoClose: 10000 });\n            return null;\n        }\n        if (!userInfoResponse || !userInfoResponse.ok) {\n            const msg = `Problem while completing login.\\nPlease retry.\\nError: ${userInfoResponse.statusText}`;\n            log(msg);\n            toast.error(msg, { autoClose: 10000 });\n            return null;\n        }\n        return await userInfoResponse.json();\n    }\n\n    /**\n     * Fetch the user-friendly version of the accountId.\n     * See https://developers.docusign.com/docs/esign-rest-api/reference/accounts/accounts/get/\n     */\n    async getExternalAccountId(accountId, baseUri) {\n        try {\n            const url = `${baseUri}${urlFrag}/accounts/${accountId}`;\n            const response = await fetch(url, {\n                method: 'GET',\n                 headers: new Headers({\n                    Authorization: `Bearer ${this.accessToken}`,\n                    Accept: `application/json`,\n                    'X-DocuSign-SDK': sdkString,\n                })\n            });\n            const data = response && response.ok && (await response.json());\n            return data.externalAccountId;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n\nexport default OAuthImplicit;","export default __webpack_public_path__ + \"static/media/anchorfields.228f85c9.pdf\";","/**\n * DocuSign and related operations.\n */\nimport { toast } from 'react-toastify';\nimport anchorfields_pdf from './assets/anchorfields.pdf'; \n\nconst docName = 'anchorfields.pdf';\nconst sdkString = 'codeEg_react';\nconst urlFrag = '/restapi/v2.1'; // DocuSign specific\n\n/**\n * Asset files\n * Add assets (eg PDF files) to the top level public directory.\n * (NOT under /src.) They will be included with the packaged app.\n *\n */\n\nclass DocuSign {\n    //\n    // constructor for the class\n    //\n    constructor(app) {\n        this.app = app;\n        this.sendEnvelope = this.sendEnvelope.bind(this);\n    }\n\n    //\n    // Instance methods\n    //\n\n    /**\n     * Send an envelope, return results or error\n     */\n    async sendEnvelope(chk) {\n        const reader = new FileReader();\n        await new Promise(resolve => {\n            reader.onloadend = resolve;\n            reader.readAsDataURL(chk); \n        });\n        const base64File = reader.result.split(',')[1];\n        \n        const envelopeRequest = {\n            emailSubject: 'Please sign the attached document',\n            status: 'sent',\n            recipients: {\n                signers: [\n                {\n                    email: this.app.state.formEmail,\n                    name: this.app.state.formName,\n                    recipientId: '1',\n                    tabs: {\n                        signHereTabs: [\n                            {\n                            anchorString: '/sn1/',\n                            anchorXOffset: '20',\n                            anchorUnits: 'pixels',\n                            },\n                        ],\n                    },\n                },\n                ],\n            },\n            documents: [\n                {\n                    name: docName,\n                    fileExtension: 'pdf',\n                    documentId: '1',\n                    documentBase64: base64File,\n                },\n            ],\n        };\n\n        try {\n        const url =\n            `${this.app.state.baseUri}${urlFrag}` +\n            `/accounts/${this.app.state.accountId}` +\n            `/envelopes`;\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(envelopeRequest),\n            headers: new Headers({\n            Authorization: `Bearer ${this.app.state.accessToken}`,\n            Accept: `application/json`,\n            'Content-Type': 'application/json',\n            'X-DocuSign-SDK': sdkString,\n            }),\n        });\n        const data = response && response.ok && (await response.json());\n        let result;\n        const headers = response.headers;\n        const availableApiReqHeader = headers.get('X-RateLimit-Remaining');\n        const availableApiRequests = availableApiReqHeader\n            ? parseInt(availableApiReqHeader, 10)\n            : undefined;\n        const apiResetHeader = headers.get('X-RateLimit-Reset');\n        const apiRequestsReset = apiResetHeader\n            ? new Date(parseInt(apiResetHeader, 10) * 1000)\n            : undefined;\n        const traceId = headers.get('X-DocuSign-TraceToken') || undefined;\n        if (response.ok) {\n            result = {\n            success: true,\n            errorMsg: undefined,\n            envelopeId: data.envelopeId,\n            availableApiRequests,\n            apiRequestsReset,\n            traceId,\n            };\n        } else {\n            result = {\n            success: false,\n            errorMsg: response && (await response.text()),\n            envelopeId: undefined,\n            availableApiRequests,\n            apiRequestsReset,\n            traceId,\n            };\n        }\n        return result;\n        } catch (e) {\n        // Unfortunately we don't have access to the real\n        // networking problem!\n        // See https://medium.com/to-err-is-aaron/detect-network-failures-when-using-fetch-40a53d56e36\n        const errorMsg =\n            e.message === 'Failed to fetch'\n            ? 'Networking error—check your Internet and DNS connections'\n            : e.message;\n        return {\n            success: false,\n            errorMsg,\n            envelopeId: undefined,\n            availableApiRequests: undefined,\n            apiRequestsReset: undefined,\n            traceId: undefined,\n        };\n        }\n    }\n\n    /**\n     * Get envelope's status, return results or error\n     */\n     async getEnvelope() {\n        try {\n        const url =\n            `${this.app.state.baseUri}${urlFrag}` +\n            `/accounts/${this.app.state.accountId}` +\n            `/envelopes/${this.app.state.responseEnvelopeId}`;\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: new Headers({\n            Authorization: `Bearer ${this.app.state.accessToken}`,\n            Accept: `application/json`,\n            'Content-Type': 'application/json',\n            'X-DocuSign-SDK': sdkString,\n            }),\n        });\n        const data = response && response.ok && (await response.json());\n        let result;\n        const headers = response.headers;\n        const availableApiReqHeader = headers.get('X-RateLimit-Remaining');\n        const availableApiRequests = availableApiReqHeader\n            ? parseInt(availableApiReqHeader, 10)\n            : undefined;\n        const apiResetHeader = headers.get('X-RateLimit-Reset');\n        const apiRequestsReset = apiResetHeader\n            ? new Date(parseInt(apiResetHeader, 10) * 1000)\n            : undefined;\n        const traceId = headers.get('X-DocuSign-TraceToken') || undefined;\n        if (response.ok) {\n            result = {\n            success: true,\n            errorMsg: undefined,\n            resultsEnvelopeJson: data,\n            availableApiRequests,\n            apiRequestsReset,\n            traceId,\n            };\n        } else {\n            result = {\n            success: false,\n            errorMsg: response && (await response.text()),\n            resultsEnvelopeJson: undefined,\n            availableApiRequests,\n            apiRequestsReset,\n            traceId,\n            };\n        }\n        return result;\n        } catch (e) {\n        // Unfortunately we don't have access to the real\n        // networking problem!\n        // See https://medium.com/to-err-is-aaron/detect-network-failures-when-using-fetch-40a53d56e36\n        const errorMsg =\n            e.message === 'Failed to fetch'\n            ? 'Networking error—check your Internet and DNS connections'\n            : e.message;\n        return {\n            success: false,\n            errorMsg,\n            resultsEnvelopeJson: undefined,\n            availableApiRequests: undefined,\n            apiRequestsReset: undefined,\n            traceId: undefined,\n        };\n        }\n    }\n\n}\n\nexport default DocuSign;\n","/* eslint-disable jsx-a11y/alt-text */\nimport React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { ToastContainer, toast } from 'react-toastify';\nimport OAuthImplicit from './OAuthImplicit';\nimport DocuSign from './DocuSign';\nimport './App.css';\nimport Modal from 'react-bootstrap/Modal';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            accessToken: undefined,\n            expires: undefined,\n            name: undefined,\n            email: undefined,\n            externalAccountId: undefined,\n            accountName: undefined,\n            accountId: undefined,\n            baseUri: undefined,\n            page: 'welcome', // initial page. Pages: welcome|loggedIn\n            working: false,\n            workingMessage: '',\n            responseErrorMsg: undefined,\n            responseEnvelopeId: undefined,\n            responseAvailableApiRequests: undefined,\n            responseApiRequestsReset: undefined,\n            responseSuccess: undefined,\n            responseTraceId: undefined,\n            resultsEnvelopeJson: undefined,\n            formName: '',\n            formEmail: '',\n            selectedFile: null,\n            errorMessage: '',\n            pdfBlobs: null,\n            namedBlobs: [],\n            selectedPdfIndex: null,\n            selectedPdfPreviewIndex: null,\n            showModal: false,\n        };\n        this.oAuthImplicit = new OAuthImplicit(this);\n        this.docusign = new DocuSign(this);\n        // bind <this> for methods called by React via buttons, etc\n        this.logout = this.logout.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.formNameChange = this.formNameChange.bind(this);\n        this.formEmailChange = this.formEmailChange.bind(this);\n        this.sendEnvelope = this.sendEnvelope.bind(this);\n        this.getEnvelope = this.getEnvelope.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n    }\n\n    handleFileChange = (event) => {\n        const selectedFiles = event.target.files;\n        console.log(\"slecgted fiels\", selectedFiles)\n        const validFiles = Array.from(selectedFiles).filter(file => file.type === 'application/pdf');\n\n        if (validFiles.length > 0) {\n            this.setState({\n                selectedFiles: validFiles,\n                errorMessage: '',\n            });\n\n            // Convert each selected file to a blob\n            validFiles.forEach(file => this.convertToBlob(file));\n        } else {\n            this.setState({\n                selectedFiles: [],\n                errorMessage: 'Please select one or more valid PDF files.',\n                selectedPdfIndex: null,\n            });\n        }\n    };\n\n    clearState = (index) => {\n        console.log(\"index for clear\", index)\n        this.setState((prevState) => ({\n            pdfBlobs: prevState.pdfBlobs.filter((_, i) => i !== index),\n            selectedPdfIndex: null\n        }));\n    };\n\n    convertToBlob = (file) => {\n        const reader = new FileReader();\n\n        reader.onloadend = () => {\n            const pdfBlob = new Blob([reader.result], { type: 'application/pdf' });\n            const namedBlob = {\n                name: file.name,\n                blob: pdfBlob,\n            };\n\n            // Update the state to include the new namedBlob\n            this.setState((prevState) => ({\n                pdfBlobs: [...(prevState.pdfBlobs || []), namedBlob],  // Change here\n            }));\n        };\n\n        reader.readAsArrayBuffer(file);\n    };\n\n    showPreviewModal = (index) => {\n        this.setState({ showModal: true, selectedPdfPreviewIndex: index });\n    };\n\n    hidePreviewModal = () => {\n        this.setState({ showModal: false, selectedPdfPreviewIndex: null });\n    };\n\n    /**\n     * Starting up--if our URL includes a hash, check it to see if \n     * it's the OAuth response\n     */\n    async componentDidMount() {\n        const config = window.config;\n        // if the url has a query parameter of ?error=logout_request (from a logout operation) \n        // then remove it\n        if (window.location.search && window.location.search === '?error=logout_request') {\n            window.history.replaceState(null, '', config.DS_APP_URL);\n        }\n\n        if (config?.DS_REDIRECT_AUTHENTICATION) {\n            const hash = window.location.hash;\n            if (!hash) { return }\n            // possible OAuth response\n            this.setState({ working: true, workingMessage: 'Logging in' });\n            var scopeValue = hash.match(/scope=([^&]+)/)[1];\n\n            // Decode the URL-encoded string and replace space with hyphen\n            var newScopeValue = decodeURIComponent(scopeValue).replace(/%20/g, \"-\");\n\n            // Replace the old scope value with the new one\n            var newhash = hash.replace(/scope=([^&]+)/, \"scope=\" + encodeURIComponent(newScopeValue));\n            await this.oAuthImplicit.receiveHash(newhash);\n            this.setState({ working: false });\n        } else {\n            // await authentication via the new tab\n            window.addEventListener(\"message\", this.receiveMessage, false);\n        }\n    }\n\n    /**\n     * Receive message from a child .\n     * This method is only used if authentication is done\n     * in a new tab. See file public/oauthResponse.html \n     * @param {object} e \n     */\n    async receiveMessage(e) {\n        console.log(\"e data\", e)\n        const rawSource = e && e.data && e.data.source\n            , ignore = {\n                'react-devtools-inject-backend': true,\n                'react-devtools-content-script': true,\n                'react-devtools-detector': true,\n                'react-devtools-bridge': true\n            }\n            , source = (rawSource && !ignore[rawSource]) ? rawSource : false\n            ;\n        if (!source) { return }; // Ignore if no source field\n        if (source === 'oauthResponse') {\n            this.setState({ working: true, workingMessage: 'Logging in' });\n            const hash = e.data && e.data.hash;\n            await this.oAuthImplicit.receiveHash(hash);\n            this.setState({ working: false });\n        }\n    }\n\n    startAuthentication() {\n        this.oAuthImplicit.startLogin();\n    }\n\n    /**\n     * Is the accessToken ok to use?\n     * @returns boolean accessTokenIsGood\n     */\n    checkToken() {\n        if (\n            !this.state.accessToken ||\n            this.state.expires === undefined ||\n            new Date() > this.state.expires\n        ) {\n            // Need new login. Only clear auth, don't clear the state (leave form contents);\n            this.clearAuth();\n            this.setState({ page: 'welcome', working: false });\n            toast.error('Your login session has ended.\\nPlease login again', {\n                autoClose: 8000,\n            });\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * This method clears this app's authentication information.\n     * But there may still be an active login session cookie\n     * from the IdP. Your IdP may have an API method for clearing\n     * the login session.\n     */\n    logout() {\n        this.clearAuth();\n        this.clearState();\n        this.setState({ page: 'welcome' });\n        toast.success('You have logged out.', { autoClose: 5000 });\n        this.oAuthImplicit.logout();\n    }\n\n    /**\n     * Clear authentication-related state\n     */\n    clearAuth() {\n        this.setState({\n            accessToken: undefined,\n            expires: undefined,\n            accountId: undefined,\n            externalAccountId: undefined,\n            accountName: undefined,\n            baseUri: undefined,\n            name: undefined,\n            email: undefined,\n        })\n    }\n\n    /**\n     * Clear the app's form and related state\n     */\n    clearState() {\n        this.setState({\n            formName: '',\n            formEmail: '',\n            working: false,\n            responseErrorMsg: undefined,\n            responseEnvelopeId: undefined,\n            responseAvailableApiRequests: undefined,\n            responseApiRequestsReset: undefined,\n            responseSuccess: undefined,\n            responseTraceId: undefined,\n            resultsEnvelopeJson: undefined,\n        });\n    }\n\n    /**\n     * Process the oauth results.\n     * This method is called by the OAuthImplicit class\n     * @param results\n     */\n    oAuthResults(results) {\n        this.setState({\n            accessToken: results.accessToken,\n            expires: results.expires,\n            name: results.name,\n            externalAccountId: results.externalAccountId,\n            email: results.email,\n            accountId: results.accountId,\n            accountName: results.accountName,\n            baseUri: results.baseUri,\n            page: 'loggedIn',\n            formName: results.name, // default: set to logged in user\n            formEmail: results.email,\n        });\n        toast.success(`Welcome ${results.name}, you are now logged in`);\n    }\n\n    formNameChange(event) {\n        this.setState({ formName: event.target.value });\n    }\n\n    formEmailChange(event) {\n        this.setState({ formEmail: event.target.value });\n    }\n\n    async sendEnvelope() {\n        this.setState({\n            responseErrorMsg: undefined,\n            responseEnvelopeId: undefined,\n            responseAvailableApiRequests: undefined,\n            responseApiRequestsReset: undefined,\n            responseSuccess: undefined,\n            responseTraceId: undefined,\n            resultsEnvelopeJson: undefined,\n        });\n        if (!this.checkToken()) {\n            return; // Problem! The user needs to login\n        }\n        if (!this.state.formEmail || this.state.formEmail.length < 5) {\n            toast.error(\"Problem: Enter the signer's email address\");\n            return;\n        }\n        if (!this.state.formName || this.state.formName.length < 5) {\n            toast.error(\"Problem: Enter the signer's name\");\n            return;\n        }\n        this.setState({ working: true, workingMessage: \"Sending envelope\" });\n        const results = await this.docusign.sendEnvelope(this.state.pdfBlobs[this.state.selectedPdfIndex].blob);\n        const { apiRequestsReset } = results;\n        const responseApiRequestsReset = apiRequestsReset ?\n            new Date(apiRequestsReset) : undefined;\n        this.setState({\n            working: false,\n            responseSuccess: results.success,\n            responseErrorMsg: results.errorMsg,\n            responseEnvelopeId: results.envelopeId,\n            responseAvailableApiRequests: results.availableApiRequests,\n            responseTraceId: results.traceId,\n            responseApiRequestsReset,\n        });\n    }\n\n    async getEnvelope() {\n        this.setState({\n            responseErrorMsg: undefined,\n            responseEnvelopeId: undefined,\n            responseAvailableApiRequests: undefined,\n            responseApiRequestsReset: undefined,\n            responseSuccess: undefined,\n            responseTraceId: undefined,\n        });\n        if (!this.checkToken()) {\n            return; // Problem! The user needs to login\n        }\n        if (!this.state.responseEnvelopeId) {\n            toast.error(\"Problem: First send an envelope\");\n            return;\n        }\n\n        this.setState({ working: true, workingMessage: \"Fetching the envelope's status\" });\n        const results = await this.docusign.getEnvelope();\n        const { apiRequestsReset } = results;\n        const responseApiRequestsReset = apiRequestsReset\n            ? new Date(apiRequestsReset) : undefined;\n        this.setState({\n            working: false,\n            responseSuccess: results.success,\n            responseErrorMsg: results.errorMsg,\n            responseAvailableApiRequests: results.availableApiRequests,\n            responseTraceId: results.traceId,\n            resultsEnvelopeJson: results.resultsEnvelopeJson,\n            responseApiRequestsReset,\n        });\n    }\n\n    /**\n     * Render this component\n     */\n    render() {\n        // Just two pages with a common header. \n        // Choose the body of the page:\n        let pagebody;\n        switch (this.state.page) {\n            case 'welcome': // not logged in\n                pagebody = this.Welcome();\n                break;\n            case 'loggedIn':\n                pagebody = this.LoggedIn();\n                break;\n            default:\n                pagebody = this.Welcome();\n        };\n\n        // Compute the name block for the top nav section\n        let nameBlock;\n        if (this.state.accessToken) {\n            nameBlock = (\n                <Navbar.Text>\n                    {this.state.name}<br />\n                    {this.state.accountName} ({this.state.accountId})\n                    <Nav>\n                        <Nav.Link href=\"#\" onClick={() => this.logout()}>Logout</Nav.Link>\n                    </Nav>\n                </Navbar.Text>\n            )\n        } else {\n            nameBlock = null;\n        }\n\n        // The spinner\n        const spinner = (\n            <Container fluid className='bodyMargin'\n                style={{ display: this.state.working ? 'block' : 'none' }}>\n                <Row className='justify-content-center'>\n                    <div className=\"spinner\" />\n                </Row>\n                <Row className='justify-content-center'>\n                    <h3>{this.state.workingMessage}…</h3>\n                </Row>\n            </Container>\n        )\n\n        // The complete page:\n        return (\n            <>\n                <Navbar fixed=\"top\" bg=\"primary\" variant=\"dark\" >\n                    <Navbar.Brand>DocuSign Code Example</Navbar.Brand>\n                    <Navbar.Toggle />\n                    <Navbar.Collapse className=\"justify-content-end\">{nameBlock}</Navbar.Collapse>\n                </Navbar>\n                <ToastContainer />\n                {spinner}\n                {pagebody}\n            </>\n        )\n    }\n\n    LoggedIn() {\n        const resetTime = this.state.responseApiRequestsReset;\n        const resetTimeString = resetTime\n            ? new Intl.DateTimeFormat('en-US', {\n                dateStyle: 'medium',\n                timeStyle: 'full',\n            }).format(resetTime)\n            : undefined;\n        return (\n            <Container className='bodyMargin'>\n                <Row>\n                    <Col className=\"col-md-4\">\n                        <h2>Send an Envelope</h2>\n                        <Form>\n                            <Form.Group controlId=\"formName\">\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Name\"\n                                    value={this.state.formName}\n                                    onChange={this.formNameChange}\n                                />\n                            </Form.Group>\n                            <Form.Group controlId=\"formEmail\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"Email\"\n                                    value={this.state.formEmail}\n                                    onChange={this.formEmailChange}\n                                />\n                            </Form.Group>\n                            <Form.Group>\n                                <label htmlFor=\"pdfFile\">Choose a PDF file:</label>\n                                <br />\n                                <Form.Group className=\"custom-file\">\n                                    <input\n                                        type=\"file\"\n                                        className=\"custom-file-input\"\n                                        id=\"pdfFile\"\n                                        accept=\".pdf\"\n                                        onChange={this.handleFileChange}\n                                        multiple\n                                    />\n\n                                    <label className=\"custom-file-label\" htmlFor=\"pdfFile\">\n                                        {this.state.selectedFile ? this.state.selectedFile.name : 'Choose file...'}\n                                    </label>\n                                </Form.Group>\n                                {this.state.errorMessage && (\n                                    <div className=\"text-danger\">{this.state.errorMessage}</div>\n                                )}\n                            </Form.Group >\n                            <Button variant=\"primary\" onClick={this.sendEnvelope}>\n                                Send Envelope\n                            </Button>\n                            <Button variant=\"primary\" className='ml-4' onClick={this.getEnvelope}>\n                                Get Envelope Status\n                            </Button>\n                            <br />\n                        </Form>\n\n                    </Col>\n                    {this.state.pdfBlobs?.length <= 2 && <div className='pdf-list'>\n                        {this.state.pdfBlobs?.length > 0 && this.state.pdfBlobs.map((namedBlob, index) => (\n                            <div style={{ width: this.state.pdfBlobs?.length < 5 ? \"25%\" : \"100%\" }} className={`mt-3 card-list ${index === this.state.selectedPdfIndex ? 'highlight-pdf' : ''}`} key={index} onClick={() => this.setState({ selectedPdfIndex: index })}>\n                                <div className=\"input-group-append btn-dir\">\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"red\"\n                                        className=\"close\"\n                                        aria-label=\"Close\"\n                                        onClick={() => this.clearState(index)}\n                                    >\n                                        <span aria-hidden=\"true\" className='btn-dir1'>&times;</span>\n                                    </Button>\n                                </div>\n                                <Form.Group className='pdf-algn' style={{ width: this.state.pdfBlobs?.length < 3 ? \"50%\" : \"100%\" }}>\n                                    <img\n                                        className='card-body'\n                                        title=\"PDF Preview\"\n                                        width=\"100%\"\n                                        height=\"auto\"\n                                        src='https://static.vecteezy.com/system/resources/previews/010/750/673/non_2x/pdf-icon-on-white-background-file-pdf-icon-sign-pdf-format-symbol-flat-style-free-vector.jpg'\n                                    // src={URL.createObjectURL(namedBlob.blob)}\n                                    />\n                                    <p className={`text-alg ${index === this.state.selectedPdfIndex ? 'highlight-text' : ''}`}>\n                                        {namedBlob.name}</p>\n                                </Form.Group>\n                                {this.state.pdfBlobs?.length > 0 && this.state.selectedPdfIndex !== null ? <Button onClick={() => this.showPreviewModal(this.state.selectedPdfIndex)}>Preview</Button> : \"\"}\n                            </div>\n                        ))}\n                    </div>}\n                    <Modal show={this.state.showModal} onHide={this.hidePreviewModal} style={{ height: \"100vh\" }}>\n                        <Modal.Header closeButton>\n                            <Modal.Title>PDF Preview</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            {this.state.pdfBlobs && this.state.selectedPdfPreviewIndex !== null && (\n                                <iframe\n                                    className='modal-pdf-preview'\n                                    title=\"PDF Preview\"\n                                    width=\"100%\"\n                                    height=\"auto\"\n                                    src={URL.createObjectURL(this.state.pdfBlobs[this.state.selectedPdfPreviewIndex].blob)}\n                                />\n                            )}\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.hidePreviewModal}>\n                                Close\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n                </Row>\n                {this.state.pdfBlobs?.length > 2 && <table class=\"table common\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Sr.No</th>\n                            <th scope=\"col\">File Name</th>\n                            <th scope=\"col\">Select</th>\n                            <th scope=\"col\">Image</th>\n                        </tr>\n                    </thead>\n\n                    {this.state.pdfBlobs.map((namedBlob, index) => (\n                        <tbody>\n                            <tr key={index}>\n                                <th scope=\"row\">{index + 1}</th>\n                                <td>{namedBlob.name}</td>\n                                <td><input type='radio'\n                                    name='selectedPdf'\n                                    checked={index === this.state.selectedPdfIndex}\n                                    onChange={() => this.setState({ selectedPdfIndex: index })} />\n                                    <Button onClick={() => this.showPreviewModal(index)} className='ml-1'>Preview</Button>\n                                </td>\n                                <td> <img\n                                    className='card-body'\n                                    title=\"PDF Preview\"\n                                    width=\"30px\"\n                                    style={{ padding: \"0\" }}\n                                    height=\"40px\"\n                                    src='https://static.vecteezy.com/system/resources/previews/010/750/673/non_2x/pdf-icon-on-white-background-file-pdf-icon-sign-pdf-format-symbol-flat-style-free-vector.jpg'\n                                /></td>\n                            </tr>\n                        </tbody>\n                    ))}\n\n                </table>}\n                <Row className='mt-4'>\n                    <Col>\n                        <h2>Results</h2>\n                        <h2>\n                            {this.state.responseSuccess !== undefined ? (\n                                this.state.responseSuccess ? (\n                                    <>\n                                        {this.setState({\n                                            responseSuccess: undefined,\n                                        })}\n                                        ✅ Success!</>\n                                ) : (\n                                    <>❌ Problem!</>\n                                )\n                            ) : null}\n                        </h2>\n                        {this.state.responseSuccess !== undefined && toast.success(`Document sent successfully to ${this.state.formEmail}`, { autoClose: 4000 })}\n                        {this.state.responseErrorMsg ? (\n                            <p>Error message: {this.state.responseErrorMsg}</p>\n                        ) : null}\n                        {this.state.responseEnvelopeId ? (\n                            <p>Envelope ID: {this.state.responseEnvelopeId}</p>\n                        ) : null}\n                        {this.state.resultsEnvelopeJson ? (\n                            <p><pre>Response: {JSON.stringify(this.state.resultsEnvelopeJson, null, 4)}</pre></p>\n                        ) : null}\n                        {this.state.responseAvailableApiRequests ? (\n                            <p>\n                                Available API requests: {this.state.responseAvailableApiRequests}\n                            </p>\n                        ) : null}\n                        {resetTimeString ? (\n                            <p>API requests reset time: {resetTimeString}</p>\n                        ) : null}\n                        {this.state.responseTraceId ? (\n                            <p>\n                                Trace ID: {this.state.responseTraceId}. Please include with all\n                                customer service questions.\n                            </p>\n                        ) : null}\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n\n    Welcome() {\n        return (\n            <Container fluid className='welcomeMargin'>\n                <Row>\n                    <Col>\n                        <Jumbotron>\n                            <h1>React Example with OAuth Authentication</h1>\n                            <p>\n                                OAuth Implicit grant flow.\n                            </p>\n                            <p>\n                                A better Way to Do signature.\n                            </p>\n                            <p>\n                                Login with your DocuSign Developer (Demo) credentials.\n                            </p>\n                            <p>\n                                <Button variant=\"primary\" onClick={this.startAuthentication}>Login</Button>\n                            </p>\n                        </Jumbotron>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <BrowserRouter>\n      <App />\n      </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}